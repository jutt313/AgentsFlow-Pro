generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users & Authentication
model User {
  id           String        @id @default(cuid())
  email        String        @unique
  passwordHash String
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  sessions     UserSession[]
  workflows    AIWorkflow[]
  credentials  Credential[]
  designerSessions DesignerSession[]

  @@index([email])
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

// AI Workflows & Agents
model AIWorkflow {
  id          String    @id @default(cuid())
  userId      String
  name        String
  description String?
  status      WorkflowStatus @default(DRAFT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  agents      Agent[]
  blueprint   WorkflowBlueprint?
  integrations Integration[]
  automations Automation[]
  webhooks    WebhookTrigger[]
  designerSession DesignerSession?

  @@index([userId])
  @@index([status])
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  PAUSED
  STOPPED
  ERROR
}

model Agent {
  id         String      @id @default(cuid())
  workflowId String
  name       String
  type       AgentType
  role       String
  status     AgentStatus @default(PENDING)
  config     Json?
  createdAt  DateTime    @default(now())
  
  workflow    AIWorkflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  logs        AgentLog[]
  healthChecks HealthCheck[]
  messageQueues MessageQueue[]
  integrations Integration[]

  @@index([workflowId])
  @@index([status])
}

enum AgentType {
  DESIGNER
  BUILDER
  MONITOR
  MANAGER
  SPECIALIST
  INTEGRATION
}

enum AgentStatus {
  PENDING
  BUILDING
  DEPLOYING
  ACTIVE
  PAUSED
  ERROR
  STOPPED
}

model WorkflowBlueprint {
  id            String   @id @default(cuid())
  workflowId    String   @unique
  blueprintData Json
  status        BlueprintStatus @default(DRAFT)
  createdAt     DateTime @default(now())
  
  workflow      AIWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
}

enum BlueprintStatus {
  DRAFT
  VALIDATED
  APPROVED
  DEPLOYED
}

// Credentials & Integrations
model Credential {
  id            String   @id @default(cuid())
  userId        String
  platform      String
  encryptedData String
  metadata      Json?    // Stores issuer, scopes, rotation info
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([platform])
}

model Integration {
  id         String           @id @default(cuid())
  workflowId String
  agentId    String?
  platform   String
  config     Json?
  status     IntegrationStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  
  workflow   AIWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  agent      Agent?     @relation(fields: [agentId], references: [id], onDelete: SetNull)

  @@index([workflowId])
  @@index([agentId])
  @@index([platform])
}

enum IntegrationStatus {
  PENDING
  ACTIVE
  ERROR
  DISABLED
}

// Monitoring & Logs
model AgentLog {
  id        String   @id @default(cuid())
  agentId   String
  level     LogLevel
  message   String
  timestamp DateTime @default(now())
  metadata  Json?
  
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([timestamp])
  @@index([level])
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  CRITICAL
}

model HealthCheck {
  id           String   @id @default(cuid())
  agentId      String
  status       HealthStatus
  responseTime Int      // in milliseconds
  timestamp    DateTime @default(now())
  metadata     Json?
  
  agent        Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([timestamp])
}

enum HealthStatus {
  HEALTHY
  DEGRADED
  UNHEALTHY
  UNKNOWN
}

model SystemAlert {
  id        String       @id @default(cuid())
  type      AlertType
  severity  AlertSeverity
  message   String
  resolved  Boolean      @default(false)
  createdAt DateTime     @default(now())
  resolvedAt DateTime?

  @@index([resolved])
  @@index([createdAt])
  @@index([severity])
}

enum AlertType {
  AGENT_DOWN
  AGENT_ERROR
  PERFORMANCE_DEGRADED
  INTEGRATION_FAILED
  SYSTEM_ERROR
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Workflows & Communication
model Automation {
  id         String           @id @default(cuid())
  workflowId String
  name       String
  definition Json
  status     AutomationStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  
  workflow   AIWorkflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([status])
}

enum AutomationStatus {
  PENDING
  ACTIVE
  PAUSED
  COMPLETED
  ERROR
}

model MessageQueue {
  id        String      @id @default(cuid())
  agentId   String
  queueName String
  status    QueueStatus @default(ACTIVE)
  createdAt DateTime    @default(now())
  
  agent     Agent       @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([queueName])
}

enum QueueStatus {
  ACTIVE
  PAUSED
  ERROR
}

// Designer Agent Session for conversation management
model DesignerSession {
  id                String   @id @default(uuid())
  userId            String
  workflowId        String?  @unique
  stage             String   // initial, discovery, analysis, design, credentials, approval, complete
  conversationState Json     // Full conversation history and state
  businessContext   Json?    // Business analysis results
  teamDesign        Json?    // Agent team structure
  blueprint         Json?    // Final blueprint
  credentials       Json?    // Encrypted credentials
  status            String   @default("active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow          AIWorkflow? @relation(fields: [workflowId], references: [id])
  
  @@index([userId])
  @@index([status])
  @@map("designer_sessions")
}

// Webhook Triggers for Automation
model WebhookTrigger {
  id             String        @id @default(cuid())
  workflowId     String
  url            String        @unique
  secretHash     String        // Hashed secret for security
  verifiedAt     DateTime?
  lastSample     Json?         // Last received sample payload
  expectedSchema Json?         // Expected payload schema
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  workflow       AIWorkflow    @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  events         WebhookEvent[]
  
  @@index([workflowId])
  @@index([url])
}

model WebhookEvent {
  id         String        @id @default(cuid())
  triggerId  String
  payload    Json
  signature  String
  timestamp  DateTime
  verified   Boolean       @default(false)
  processed  Boolean       @default(false)
  createdAt  DateTime      @default(now())
  
  trigger    WebhookTrigger @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  
  @@index([triggerId])
  @@index([processed])
  @@index([timestamp])
}

